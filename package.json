{
  "name": "foundry-demo",
  "version": "1.0.0",
  "description": "",
  "author": "",
  "license": "MIT",
  "scripts": {
    "install": "make install",
    "clean": "make clean",
    "remove": "make remove",
    "reinstall": "make all",
    "build": "forge build",
    "rebuild": "make clean && make build",
    "snapshot": "forge snapshot",
    "format": "make format",
    "lint": "make lint",
    "update": "forge update",
    "all": "make all",
    "env": "echo run: 'source .env' && echo $SIGNER",
    "test": "forge test -vv",
    "erc20": "forge test -vvv --match-path test/ERC20Token.t.sol",
    "erc721": "forge test -vvv --match-path test/ERC721Token.t.sol",
    "erc1155": "forge test -vvv --match-path test/ERC1155.t.sol",
    "counter": "forge test --match-path test/Counter.t.sol -vv",
    "error": "forge test --match-path test/Error.t.sol -vvv",
    "event": "forge test --match-path test/Event.t.sol -vvv",
    "time": "forge test --match-path test/Time.t.sol -vvv",
    "sign": "forge test --match-path test/Sign.t.sol -vvv",
    "erc20permitoz": "forge test --match-path test/ERC20PermitOz.t.sol -vvv",
    "deployatsameaddr": "forge test --match-path test/DeployAtSameAddr.t.sol -vvv",
    "fuzz": "forge test --match-path test/Fuzz.t.sol",
    "inv0": "forge test --match-path test/invariants/Invariant_0.t.sol -vvv",
    "inv1": "forge test --match-path test/invariants/Invariant_1.t.sol -vvv",
    "inv2": "forge test --match-path test/invariants/Invariant_2.t.sol -vvv",
    "inv3": "forge test --match-path test/invariants/Invariant_3.t.sol -vvv",
    "ffi1": "cat ffi_test.txt",
    "ffi2": "forge test --match-path test/FFI.t.sol --ffi -vvv",
    "diff": "FOUNDRY_FUZZ_RUNS=100 forge test --match-path test/DifferentialTest.t.sol --ffi -vvv",
    "delegatecall": "forge test --match-path test/DelegateCall.t.sol -vvv",
    "reentrancy": "forge test --match-path test/Reentrancy.t.sol -vvv",
    "general": "forge test --match-path test/General.t.sol -vvv",
    "deploybytecode": "forge test --match-path test/DeployBytecode.t.sol -vvv",
    "deployCreate2": "forge test --match-path test/DeployCreate2.t.sol -vvv",
    "inheritance": "forge test --match-path test/Inheritance.t.sol -vvv",
    "wallet": "forge test --match-path test/WalletPayable.t.sol -vvv",
    "weth": "forge test --match-path test/Weth.t.sol -vvv",
    "multisig": "forge test --match-path test/MultiSigWallet.t.sol -vvv",
    "callencodesig": "forge test --match-path test/CallEncodeSig.t.sol -vvv",
    "library": "forge test --match-path test/Library.t.sol -vvv",
    "keccak": "forge test --match-path test/Keccak.t.sol -vvv",
    "verifysig": "forge test --match-path test/VerifySignature.t.sol -vvv",
    "access": "forge test --match-path test/AccessControl.t.sol -vvv",
    "auctiondutch": "forge test --match-path test/AuctionDutch.t.sol -vvv",
    "auctionenglish": "forge test --match-path test/AuctionEnglish.t.sol -vvv",
    "crowdfund": "forge test --match-path test/CrowdFund.t.sol -vvv",
    "deploynew": "forge test --match-path test/DeployNew.t.sol -vvv",
    "multicall": "forge test --match-path test/MultiCall.t.sol -vvv",
    "multidelegatecall": "forge test --match-path test/MultiDelegateCall.t.sol -vvv",
    "abidecode": "forge test --match-path test/AbiDecode.t.sol -vvv",
    "abiencode": "forge test --match-path test/AbiEncode.t.sol -vvv",
    "gassaving": "forge test --match-path test/GasSaving.t.sol -vvv",
    "timelock": "forge test --match-path test/TimeLock.t.sol -vvv",
    "vault": "forge test --match-path test/Vault.t.sol -vvv",
    "csamm": "forge test --match-path test/ConstSumAMM.t.sol -vvv",
    "cpamm": "forge test --match-path test/ConstProductAMM.t.sol -vvv",
    "stakingrewards": "forge test --match-path test/StakingRewards.t.sol -vvv",
    "stakingrewardsd": "forge test --match-path test/StakingRewardsD.t.sol -vvv",
    "bitwise": "forge test --match-path test/BitwiseOperators.t.sol -vvv",
    "bit": "forge test --match-path test/Bit.t.sol -vvv",
    "ugtransparent": "forge test --match-path test/UgTransparent.t.sol -vvv",
    "ugtransparent2": "forge test --match-path test/UgTransparent2.t.sol -vvv",
    "uguups": "forge test --match-path test/UgUUPS.t.sol -vvv",
    "erc20u": "forge test --match-path test/UgERC20.t.sol -vvv",
    "fallback": "forge test --match-path test/Fallback.t.sol -vvv",
    "forkweth": "forge test --fork-url $MAINNET_RPC_URL --match-path test/ForkWeth.t.sol -vvv",
    "forkdai": "forge test --fork-url $MAINNET_RPC_URL --match-path test/ForkDai.t.sol -vvv",
    "flashloanDexDeploy": "forge create --rpc-url $SEPOLIA_RPC_URL --private-key $PRIVATE_KEY --etherscan-api-key $ETHERSCAN_API_KEY --verify src/FlashloanDex.sol:FlashloanDex",
    "flashloanClientAaveDeploy": "forge create --rpc-url $SEPOLIA_RPC_URL --constructor-args $PoolAddressesProviderAaveV3Sepolia --private-key $PRIVATE_KEY --etherscan-api-key $ETHERSCAN_API_KEY --verify src/FlashloanClientAave.sol:FlashloanClientAave",
    "fLiquidityClientAaveDeploy": "forge create --rpc-url $SEPOLIA_RPC_URL --constructor-args $PoolAddressesProviderAaveV3Sepolia --private-key $PRIVATE_KEY --etherscan-api-key $ETHERSCAN_API_KEY --verify src/fLiquidityClientAave.sol:LiquidityClientAave",
    "uniswapSingleSwapClientDeploy": "forge create --rpc-url $GOERLI_RPC_URL --private-key $PRIVATE_KEY --etherscan-api-key $ETHERSCAN_API_KEY --verify src/UniswapSingleSwap.sol:UniswapSingleSwap",
    "uniswapSingleSwap": "forge test --fork-url $GOERLI_RPC_URL --match-path test/UniswapSingleSwap.t.sol -vvv",
    "flashloanClientAave": "forge test --fork-url $SEPOLIA_RPC_URL --match-path test/FlashloanAave.t.sol -vvv",
    "fLiquidityClientAave": "forge test --fork-url $SEPOLIA_RPC_URL --match-path test/fLiquidityClientAave.t.sol -vvv",
    "deployArbitrum": "forge script script/Counter.s.sol:CounterScript --fork-url $ARBITRUM_GOERLI --broadcast --verify -vvvv",
    "deployOptimism": "forge script script/Counter.s.sol:CounterScript --fork-url $OPTIMISM_GOERLI --broadcast --verify -vvvv",
    "deployAnvil": "forge script script/Counter.s.sol:CounterScript --fork-url $ANVIL_RPC --broadcast -vvvv",
    "getCount": "cast call $CONTRACT_ADDRESS 'getCount()(uint256)'",
    "setCount": "cast send $CONTRACT_ADDRESS 'setCount(uint256)' 327 --private-key $PRIVATE_KEY"
  }
}
